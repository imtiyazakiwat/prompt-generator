{"ast":null,"code":"var _jsxFileName = \"D:\\\\all\\\\Desktop\\\\promt gen\\\\prompt-generator\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useCallback } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Helper function to clean the response text\nconst cleanResponseText = text => {\n  const cleanedText = text\n  // Remove everything between <think> tags including the tags\n  .replace(/<think>[\\s\\S]*?<\\/think>/g, '')\n  // Remove any XML/HTML-like tags\n  .replace(/<[^>]*>/g, '')\n  // Remove markdown headings (#)\n  .replace(/^#+\\s*/gm, '')\n  // Remove asterisks and underscores (bold/italic markdown)\n  .replace(/[*_]/g, '')\n  // Remove special characters but keep basic punctuation\n  .replace(/[^\\w\\s.,!?()-]/g, '')\n  // Remove multiple consecutive newlines\n  .replace(/\\n{3,}/g, '\\n\\n')\n  // Remove leading/trailing whitespace\n  .trim();\n  return cleanedText;\n};\nconst CopyButton = ({\n  text\n}) => {\n  _s();\n  const [copied, setCopied] = useState(false);\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(text);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy text:', err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `copy-button ${copied ? 'copied' : ''}`,\n    onClick: handleCopy,\n    children: copied ? 'Copied!' : 'Copy'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(CopyButton, \"NE86rL3vg4NVcTTWDavsT0hUBJs=\");\n_c = CopyButton;\nfunction App() {\n  _s2();\n  var _response$suggestedPa;\n  const [userInput, setUserInput] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(null);\n  const [newPageName, setNewPageName] = useState('');\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [expandedPrompt, setExpandedPrompt] = useState(null);\n  const [generatingPages, setGeneratingPages] = useState(new Set());\n  const [customPages, setCustomPages] = useState([]);\n  const [hasGenerated, setHasGenerated] = useState(false);\n  const generatePrompts = async () => {\n    if (!userInput.trim()) {\n      setError('Please enter a website or app idea');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      // Make parallel requests for main concept and page suggestions\n      const [conceptResponse, suggestionsResponse] = await Promise.all([fetch('http://localhost:5001/api/generate-prompts', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          messages: [{\n            role: \"user\",\n            content: `Generate a comprehensive website/app concept based on this idea: ${userInput}. \n                       Include the following:\n                       1. Main concept and overall purpose\n                       2. Key features and functionality\n                       3. Target audience\n                       4. Unique selling points`\n          }]\n        })\n      }), fetch('http://localhost:5001/api/suggest-pages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          websiteIdea: userInput\n        })\n      })]);\n      if (!conceptResponse.ok || !suggestionsResponse.ok) {\n        throw new Error('Failed to generate content');\n      }\n      const [conceptData, suggestionsData] = await Promise.all([conceptResponse.json(), suggestionsResponse.json()]);\n\n      // Remove the dummy prompts\n      const formattedResponse = {\n        ...conceptData,\n        pagePrompts: {},\n        // Start with empty pagePrompts\n        suggestedPages: suggestionsData.suggestedPages\n      };\n      setResponse(formattedResponse);\n      setHasGenerated(true);\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error instanceof Error ? error.message : 'An error occurred');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const generatePagePrompt = async pageName => {\n    try {\n      // Add page to generating set\n      setGeneratingPages(prev => new Set(prev).add(pageName));\n      const response = await fetch('http://localhost:5001/api/generate-page-prompt', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          websiteIdea: userInput,\n          pageName: pageName\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.details || 'Failed to generate page prompt');\n      }\n      if (!data.pagePrompt) {\n        throw new Error('Invalid response format from server');\n      }\n      setResponse(prev => {\n        if (!prev) return null;\n        return {\n          ...prev,\n          pagePrompts: {\n            ...prev.pagePrompts,\n            [pageName]: cleanResponseText(data.pagePrompt)\n          }\n        };\n      });\n      setSelectedPages(prev => [...prev, pageName]);\n    } catch (error) {\n      console.error('Error:', error);\n      setError(error instanceof Error ? error.message : 'Failed to generate page prompt');\n      // Remove page from selected pages if generation failed\n      setSelectedPages(prev => prev.filter(p => p !== pageName));\n    } finally {\n      // Remove page from generating set\n      setGeneratingPages(prev => {\n        const next = new Set(prev);\n        next.delete(pageName);\n        return next;\n      });\n    }\n  };\n  const handleAddCustomPage = () => {\n    if (newPageName.trim()) {\n      const pageName = newPageName.trim();\n      setCustomPages(prev => [...prev, pageName]);\n      generatePagePrompt(pageName);\n      setNewPageName('');\n    }\n  };\n  const handleExpandPrompt = useCallback((pageName, content) => {\n    setExpandedPrompt({\n      pageName,\n      content\n    });\n  }, []);\n  const formatResponse = text => {\n    return text.split('\\n').map((line, index) => {\n      const trimmedLine = line.trim();\n      if (!trimmedLine) {\n        return /*#__PURE__*/_jsxDEV(\"br\", {}, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 16\n        }, this);\n      }\n\n      // Convert list items (lines starting with numbers or dashes)\n      if (/^\\d+\\.|\\-/.test(trimmedLine)) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"formatted-list-item\",\n          children: trimmedLine.replace(/^\\d+\\.|\\-/, '').trim()\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this);\n      }\n\n      // Regular paragraph\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"formatted-paragraph\",\n        children: trimmedLine\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 14\n      }, this);\n    });\n  };\n  const handleRegenerate = () => {\n    setResponse(null);\n    setSelectedPages([]);\n    setExpandedPrompt(null);\n    setGeneratingPages(new Set());\n    setCustomPages([]);\n    setHasGenerated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gradient-background\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"AI Prompt Builder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"subtitle\",\n          children: \"Transform your ideas into detailed prompts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"main-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"idea-input\",\n            placeholder: \"Describe your website or app idea...\",\n            value: userInput,\n            onChange: e => setUserInput(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), hasGenerated ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"generate-button regenerate\",\n            onClick: handleRegenerate,\n            children: \"Regenerate Prompts\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"generate-button\",\n            onClick: generatePrompts,\n            disabled: isLoading || !userInput.trim(),\n            children: isLoading ? 'Generating...' : 'Generate Prompts'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"thinking-animation\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"brain-wave\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"brain-wave\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"brain-wave\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"loading-text\",\n            children: \"AI is crafting your concept...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this), response && !isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"results-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"prompt-card main-prompt\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-header\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Generated Concept\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CopyButton, {\n                text: response.mainPrompt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"formatted-content\",\n              children: formatResponse(response.mainPrompt)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"page-prompts-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"page-suggestions\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Suggested Pages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"suggested-pages-grid\",\n                children: (_response$suggestedPa = response.suggestedPages) === null || _response$suggestedPa === void 0 ? void 0 : _response$suggestedPa.map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `page-suggestion-button \n                          ${selectedPages.includes(page) ? 'selected' : ''} \n                          ${generatingPages.has(page) ? 'generating' : ''}`,\n                  onClick: () => !selectedPages.includes(page) && !generatingPages.has(page) && generatePagePrompt(page),\n                  disabled: selectedPages.includes(page) || generatingPages.has(page),\n                  children: [page, generatingPages.has(page) && /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"page-generating-indicator\",\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"dot\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 306,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"dot\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 307,\n                      columnNumber: 29\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"dot\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 29\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 27\n                  }, this)]\n                }, page, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"custom-pages-section\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"Custom Pages\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 316,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"custom-pages-grid\",\n                  children: customPages.map(page => /*#__PURE__*/_jsxDEV(\"button\", {\n                    className: `page-suggestion-button \n                            ${selectedPages.includes(page) ? 'selected' : ''} \n                            ${generatingPages.has(page) ? 'generating' : ''}`,\n                    disabled: selectedPages.includes(page) || generatingPages.has(page),\n                    children: [page, generatingPages.has(page) && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"page-generating-indicator\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"dot\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 329,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"dot\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 330,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"dot\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 331,\n                        columnNumber: 31\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 328,\n                      columnNumber: 29\n                    }, this)]\n                  }, page, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 319,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 317,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"custom-page-input\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: newPageName,\n                  onChange: e => setNewPageName(e.target.value),\n                  placeholder: \"Enter custom page name...\",\n                  className: \"page-name-input\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"add-page-button\",\n                  onClick: handleAddCustomPage,\n                  disabled: !newPageName.trim(),\n                  children: \"Add Page\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"generated-pages\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Generated Page Prompts\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"page-prompts-grid\",\n                children: Object.entries(response.pagePrompts).map(([page, prompt]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"prompt-card page-prompt-card\",\n                  onClick: () => handleExpandPrompt(page, prompt),\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-header\",\n                    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                      children: page.charAt(0).toUpperCase() + page.slice(1)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 367,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(CopyButton, {\n                      text: prompt\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 368,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 366,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"formatted-content preview\",\n                    children: formatResponse(prompt)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 370,\n                    columnNumber: 25\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"card-footer\",\n                    children: /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"expand-hint\",\n                      children: \"Click to expand\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 374,\n                      columnNumber: 27\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 25\n                  }, this)]\n                }, page, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 361,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), expandedPrompt && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-overlay\",\n      onClick: () => setExpandedPrompt(null),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        onClick: e => e.stopPropagation(),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: expandedPrompt.pageName.charAt(0).toUpperCase() + expandedPrompt.pageName.slice(1)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-button\",\n            onClick: () => setExpandedPrompt(null),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-body\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"formatted-content\",\n            children: formatResponse(expandedPrompt.content)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-footer\",\n          children: /*#__PURE__*/_jsxDEV(CopyButton, {\n            text: expandedPrompt.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"bG5JIKvlqh2qVdM7hCr+5NWIcN8=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"CopyButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useCallback","jsxDEV","_jsxDEV","cleanResponseText","text","cleanedText","replace","trim","CopyButton","_s","copied","setCopied","handleCopy","navigator","clipboard","writeText","setTimeout","err","console","error","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","App","_s2","_response$suggestedPa","userInput","setUserInput","isLoading","setIsLoading","response","setResponse","setError","newPageName","setNewPageName","selectedPages","setSelectedPages","expandedPrompt","setExpandedPrompt","generatingPages","setGeneratingPages","Set","customPages","setCustomPages","hasGenerated","setHasGenerated","generatePrompts","conceptResponse","suggestionsResponse","Promise","all","fetch","method","headers","body","JSON","stringify","messages","role","content","websiteIdea","ok","Error","conceptData","suggestionsData","json","formattedResponse","pagePrompts","suggestedPages","message","generatePagePrompt","pageName","prev","add","data","details","pagePrompt","filter","p","next","delete","handleAddCustomPage","handleExpandPrompt","formatResponse","split","map","line","index","trimmedLine","test","handleRegenerate","placeholder","value","onChange","e","target","disabled","mainPrompt","page","includes","has","type","Object","entries","prompt","charAt","toUpperCase","slice","stopPropagation","_c2","$RefreshReg$"],"sources":["D:/all/Desktop/promt gen/prompt-generator/src/App.tsx"],"sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport './App.css';\r\n\r\ninterface PromptResponse {\r\n  mainPrompt: string;\r\n  pagePrompts: { [key: string]: string };\r\n  suggestedPages?: string[];\r\n}\r\n\r\ninterface ExpandedPrompt {\r\n  pageName: string;\r\n  content: string;\r\n}\r\n\r\n// Helper function to clean the response text\r\nconst cleanResponseText = (text: string): string => {\r\n  const cleanedText = text\r\n    // Remove everything between <think> tags including the tags\r\n    .replace(/<think>[\\s\\S]*?<\\/think>/g, '')\r\n    // Remove any XML/HTML-like tags\r\n    .replace(/<[^>]*>/g, '')\r\n    // Remove markdown headings (#)\r\n    .replace(/^#+\\s*/gm, '')\r\n    // Remove asterisks and underscores (bold/italic markdown)\r\n    .replace(/[*_]/g, '')\r\n    // Remove special characters but keep basic punctuation\r\n    .replace(/[^\\w\\s.,!?()-]/g, '')\r\n    // Remove multiple consecutive newlines\r\n    .replace(/\\n{3,}/g, '\\n\\n')\r\n    // Remove leading/trailing whitespace\r\n    .trim();\r\n  \r\n  return cleanedText;\r\n};\r\n\r\nconst CopyButton: React.FC<{ text: string }> = ({ text }) => {\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  const handleCopy = async () => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      setCopied(true);\r\n      setTimeout(() => setCopied(false), 2000);\r\n    } catch (err) {\r\n      console.error('Failed to copy text:', err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button \r\n      className={`copy-button ${copied ? 'copied' : ''}`}\r\n      onClick={handleCopy}\r\n    >\r\n      {copied ? 'Copied!' : 'Copy'}\r\n    </button>\r\n  );\r\n};\r\n\r\nfunction App() {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [response, setResponse] = useState<PromptResponse | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [newPageName, setNewPageName] = useState('');\r\n  const [selectedPages, setSelectedPages] = useState<string[]>([]);\r\n  const [expandedPrompt, setExpandedPrompt] = useState<ExpandedPrompt | null>(null);\r\n  const [generatingPages, setGeneratingPages] = useState<Set<string>>(new Set());\r\n  const [customPages, setCustomPages] = useState<string[]>([]);\r\n  const [hasGenerated, setHasGenerated] = useState(false);\r\n\r\n  const generatePrompts = async () => {\r\n    if (!userInput.trim()) {\r\n      setError('Please enter a website or app idea');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      // Make parallel requests for main concept and page suggestions\r\n      const [conceptResponse, suggestionsResponse] = await Promise.all([\r\n        fetch('http://localhost:5001/api/generate-prompts', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({\r\n            messages: [{\r\n              role: \"user\",\r\n              content: `Generate a comprehensive website/app concept based on this idea: ${userInput}. \r\n                       Include the following:\r\n                       1. Main concept and overall purpose\r\n                       2. Key features and functionality\r\n                       3. Target audience\r\n                       4. Unique selling points`\r\n            }]\r\n          })\r\n        }),\r\n        fetch('http://localhost:5001/api/suggest-pages', {\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ websiteIdea: userInput })\r\n        })\r\n      ]);\r\n\r\n      if (!conceptResponse.ok || !suggestionsResponse.ok) {\r\n        throw new Error('Failed to generate content');\r\n      }\r\n\r\n      const [conceptData, suggestionsData] = await Promise.all([\r\n        conceptResponse.json(),\r\n        suggestionsResponse.json()\r\n      ]);\r\n\r\n      // Remove the dummy prompts\r\n      const formattedResponse = {\r\n        ...conceptData,\r\n        pagePrompts: {},  // Start with empty pagePrompts\r\n        suggestedPages: suggestionsData.suggestedPages\r\n      };\r\n\r\n      setResponse(formattedResponse);\r\n      setHasGenerated(true);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setError(error instanceof Error ? error.message : 'An error occurred');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const generatePagePrompt = async (pageName: string) => {\r\n    try {\r\n      // Add page to generating set\r\n      setGeneratingPages(prev => new Set(prev).add(pageName));\r\n      \r\n      const response = await fetch('http://localhost:5001/api/generate-page-prompt', {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json' \r\n        },\r\n        body: JSON.stringify({\r\n          websiteIdea: userInput,\r\n          pageName: pageName\r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.details || 'Failed to generate page prompt');\r\n      }\r\n\r\n      if (!data.pagePrompt) {\r\n        throw new Error('Invalid response format from server');\r\n      }\r\n\r\n      setResponse(prev => {\r\n        if (!prev) return null;\r\n        return {\r\n          ...prev,\r\n          pagePrompts: {\r\n            ...prev.pagePrompts,\r\n            [pageName]: cleanResponseText(data.pagePrompt)\r\n          }\r\n        };\r\n      });\r\n      \r\n      setSelectedPages(prev => [...prev, pageName]);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setError(error instanceof Error ? error.message : 'Failed to generate page prompt');\r\n      // Remove page from selected pages if generation failed\r\n      setSelectedPages(prev => prev.filter(p => p !== pageName));\r\n    } finally {\r\n      // Remove page from generating set\r\n      setGeneratingPages(prev => {\r\n        const next = new Set(prev);\r\n        next.delete(pageName);\r\n        return next;\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleAddCustomPage = () => {\r\n    if (newPageName.trim()) {\r\n      const pageName = newPageName.trim();\r\n      setCustomPages(prev => [...prev, pageName]);\r\n      generatePagePrompt(pageName);\r\n      setNewPageName('');\r\n    }\r\n  };\r\n\r\n  const handleExpandPrompt = useCallback((pageName: string, content: string) => {\r\n    setExpandedPrompt({ pageName, content });\r\n  }, []);\r\n\r\n  const formatResponse = (text: string) => {\r\n    return text.split('\\n').map((line, index) => {\r\n      const trimmedLine = line.trim();\r\n      if (!trimmedLine) {\r\n        return <br key={index} />;\r\n      }\r\n      \r\n      // Convert list items (lines starting with numbers or dashes)\r\n      if (/^\\d+\\.|\\-/.test(trimmedLine)) {\r\n        return (\r\n          <li key={index} className=\"formatted-list-item\">\r\n            {trimmedLine.replace(/^\\d+\\.|\\-/, '').trim()}\r\n          </li>\r\n        );\r\n      }\r\n      \r\n      // Regular paragraph\r\n      return <p key={index} className=\"formatted-paragraph\">{trimmedLine}</p>;\r\n    });\r\n  };\r\n\r\n  const handleRegenerate = () => {\r\n    setResponse(null);\r\n    setSelectedPages([]);\r\n    setExpandedPrompt(null);\r\n    setGeneratingPages(new Set());\r\n    setCustomPages([]);\r\n    setHasGenerated(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"gradient-background\">\r\n        <header className=\"App-header\">\r\n          <h1 className=\"title\">AI Prompt Builder</h1>\r\n          <p className=\"subtitle\">Transform your ideas into detailed prompts</p>\r\n        </header>\r\n\r\n        <main className=\"main-content\">\r\n          <div className=\"input-container\">\r\n            <textarea\r\n              className=\"idea-input\"\r\n              placeholder=\"Describe your website or app idea...\"\r\n              value={userInput}\r\n              onChange={(e) => setUserInput(e.target.value)}\r\n            />\r\n            {hasGenerated ? (\r\n              <button \r\n                className=\"generate-button regenerate\"\r\n                onClick={handleRegenerate}\r\n              >\r\n                Regenerate Prompts\r\n              </button>\r\n            ) : (\r\n              <button \r\n                className=\"generate-button\"\r\n                onClick={generatePrompts}\r\n                disabled={isLoading || !userInput.trim()}\r\n              >\r\n                {isLoading ? 'Generating...' : 'Generate Prompts'}\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {isLoading && (\r\n            <div className=\"loading-container\">\r\n              <div className=\"thinking-animation\">\r\n                <div className=\"brain-wave\"></div>\r\n                <div className=\"brain-wave\"></div>\r\n                <div className=\"brain-wave\"></div>\r\n              </div>\r\n              <p className=\"loading-text\">AI is crafting your concept...</p>\r\n            </div>\r\n          )}\r\n\r\n          {error && (\r\n            <div className=\"error-message\">\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          {response && !isLoading && (\r\n            <div className=\"results-container\">\r\n              <div className=\"prompt-card main-prompt\">\r\n                <div className=\"card-header\">\r\n                  <h2>Generated Concept</h2>\r\n                  <CopyButton text={response.mainPrompt} />\r\n                </div>\r\n                <div className=\"formatted-content\">\r\n                  {formatResponse(response.mainPrompt)}\r\n                </div>\r\n              </div>\r\n              \r\n              <div className=\"page-prompts-section\">\r\n                <div className=\"page-suggestions\">\r\n                  <h2>Suggested Pages</h2>\r\n                  <div className=\"suggested-pages-grid\">\r\n                    {response.suggestedPages?.map(page => (\r\n                      <button\r\n                        key={page}\r\n                        className={`page-suggestion-button \r\n                          ${selectedPages.includes(page) ? 'selected' : ''} \r\n                          ${generatingPages.has(page) ? 'generating' : ''}`}\r\n                        onClick={() => !selectedPages.includes(page) && !generatingPages.has(page) && generatePagePrompt(page)}\r\n                        disabled={selectedPages.includes(page) || generatingPages.has(page)}\r\n                      >\r\n                        {page}\r\n                        {generatingPages.has(page) && (\r\n                          <div className=\"page-generating-indicator\">\r\n                            <div className=\"dot\"></div>\r\n                            <div className=\"dot\"></div>\r\n                            <div className=\"dot\"></div>\r\n                          </div>\r\n                        )}\r\n                      </button>\r\n                    ))}\r\n                  </div>\r\n\r\n                  <div className=\"custom-pages-section\">\r\n                    <h3>Custom Pages</h3>\r\n                    <div className=\"custom-pages-grid\">\r\n                      {customPages.map(page => (\r\n                        <button\r\n                          key={page}\r\n                          className={`page-suggestion-button \r\n                            ${selectedPages.includes(page) ? 'selected' : ''} \r\n                            ${generatingPages.has(page) ? 'generating' : ''}`}\r\n                          disabled={selectedPages.includes(page) || generatingPages.has(page)}\r\n                        >\r\n                          {page}\r\n                          {generatingPages.has(page) && (\r\n                            <div className=\"page-generating-indicator\">\r\n                              <div className=\"dot\"></div>\r\n                              <div className=\"dot\"></div>\r\n                              <div className=\"dot\"></div>\r\n                            </div>\r\n                          )}\r\n                        </button>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"custom-page-input\">\r\n                    <input\r\n                      type=\"text\"\r\n                      value={newPageName}\r\n                      onChange={(e) => setNewPageName(e.target.value)}\r\n                      placeholder=\"Enter custom page name...\"\r\n                      className=\"page-name-input\"\r\n                    />\r\n                    <button\r\n                      className=\"add-page-button\"\r\n                      onClick={handleAddCustomPage}\r\n                      disabled={!newPageName.trim()}\r\n                    >\r\n                      Add Page\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"generated-pages\">\r\n                  <h2>Generated Page Prompts</h2>\r\n                  <div className=\"page-prompts-grid\">\r\n                    {Object.entries(response.pagePrompts).map(([page, prompt]) => (\r\n                      <div \r\n                        key={page} \r\n                        className=\"prompt-card page-prompt-card\"\r\n                        onClick={() => handleExpandPrompt(page, prompt)}\r\n                      >\r\n                        <div className=\"card-header\">\r\n                          <h3>{page.charAt(0).toUpperCase() + page.slice(1)}</h3>\r\n                          <CopyButton text={prompt} />\r\n                        </div>\r\n                        <div className=\"formatted-content preview\">\r\n                          {formatResponse(prompt)}\r\n                        </div>\r\n                        <div className=\"card-footer\">\r\n                          <span className=\"expand-hint\">Click to expand</span>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </main>\r\n      </div>\r\n\r\n      {expandedPrompt && (\r\n        <div className=\"modal-overlay\" onClick={() => setExpandedPrompt(null)}>\r\n          <div className=\"modal-content\" onClick={e => e.stopPropagation()}>\r\n            <div className=\"modal-header\">\r\n              <h2>{expandedPrompt.pageName.charAt(0).toUpperCase() + expandedPrompt.pageName.slice(1)}</h2>\r\n              <button className=\"close-button\" onClick={() => setExpandedPrompt(null)}>×</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <div className=\"formatted-content\">\r\n                {formatResponse(expandedPrompt.content)}\r\n              </div>\r\n            </div>\r\n            <div className=\"modal-footer\">\r\n              <CopyButton text={expandedPrompt.content} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAanB;AACA,MAAMC,iBAAiB,GAAIC,IAAY,IAAa;EAClD,MAAMC,WAAW,GAAGD;EAClB;EAAA,CACCE,OAAO,CAAC,2BAA2B,EAAE,EAAE;EACxC;EAAA,CACCA,OAAO,CAAC,UAAU,EAAE,EAAE;EACvB;EAAA,CACCA,OAAO,CAAC,UAAU,EAAE,EAAE;EACvB;EAAA,CACCA,OAAO,CAAC,OAAO,EAAE,EAAE;EACpB;EAAA,CACCA,OAAO,CAAC,iBAAiB,EAAE,EAAE;EAC9B;EAAA,CACCA,OAAO,CAAC,SAAS,EAAE,MAAM;EAC1B;EAAA,CACCC,IAAI,CAAC,CAAC;EAET,OAAOF,WAAW;AACpB,CAAC;AAED,MAAMG,UAAsC,GAAGA,CAAC;EAAEJ;AAAK,CAAC,KAAK;EAAAK,EAAA;EAC3D,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3C,MAAMa,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACX,IAAI,CAAC;MACzCO,SAAS,CAAC,IAAI,CAAC;MACfK,UAAU,CAAC,MAAML,SAAS,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAC1C,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,GAAG,CAAC;IAC5C;EACF,CAAC;EAED,oBACEf,OAAA;IACEkB,SAAS,EAAE,eAAeV,MAAM,GAAG,QAAQ,GAAG,EAAE,EAAG;IACnDW,OAAO,EAAET,UAAW;IAAAU,QAAA,EAEnBZ,MAAM,GAAG,SAAS,GAAG;EAAM;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtB,CAAC;AAEb,CAAC;AAACjB,EAAA,CArBID,UAAsC;AAAAmB,EAAA,GAAtCnB,UAAsC;AAuB5C,SAASoB,GAAGA,CAAA,EAAG;EAAAC,GAAA;EAAA,IAAAC,qBAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkC,SAAS,EAAEC,YAAY,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACoC,QAAQ,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAwB,IAAI,CAAC;EACrE,MAAM,CAACoB,KAAK,EAAEkB,QAAQ,CAAC,GAAGtC,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACuC,WAAW,EAAEC,cAAc,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACyC,aAAa,EAAEC,gBAAgB,CAAC,GAAG1C,QAAQ,CAAW,EAAE,CAAC;EAChE,MAAM,CAAC2C,cAAc,EAAEC,iBAAiB,CAAC,GAAG5C,QAAQ,CAAwB,IAAI,CAAC;EACjF,MAAM,CAAC6C,eAAe,EAAEC,kBAAkB,CAAC,GAAG9C,QAAQ,CAAc,IAAI+C,GAAG,CAAC,CAAC,CAAC;EAC9E,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGjD,QAAQ,CAAW,EAAE,CAAC;EAC5D,MAAM,CAACkD,YAAY,EAAEC,eAAe,CAAC,GAAGnD,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMoD,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI,CAACpB,SAAS,CAACxB,IAAI,CAAC,CAAC,EAAE;MACrB8B,QAAQ,CAAC,oCAAoC,CAAC;MAC9C;IACF;IAEAH,YAAY,CAAC,IAAI,CAAC;IAClBG,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF;MACA,MAAM,CAACe,eAAe,EAAEC,mBAAmB,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC/DC,KAAK,CAAC,4CAA4C,EAAE;QAClDC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,QAAQ,EAAE,CAAC;YACTC,IAAI,EAAE,MAAM;YACZC,OAAO,EAAE,oEAAoEjC,SAAS;AACpG;AACA;AACA;AACA;AACA;UACY,CAAC;QACH,CAAC;MACH,CAAC,CAAC,EACFyB,KAAK,CAAC,yCAAyC,EAAE;QAC/CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEI,WAAW,EAAElC;QAAU,CAAC;MACjD,CAAC,CAAC,CACH,CAAC;MAEF,IAAI,CAACqB,eAAe,CAACc,EAAE,IAAI,CAACb,mBAAmB,CAACa,EAAE,EAAE;QAClD,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;MAC/C;MAEA,MAAM,CAACC,WAAW,EAAEC,eAAe,CAAC,GAAG,MAAMf,OAAO,CAACC,GAAG,CAAC,CACvDH,eAAe,CAACkB,IAAI,CAAC,CAAC,EACtBjB,mBAAmB,CAACiB,IAAI,CAAC,CAAC,CAC3B,CAAC;;MAEF;MACA,MAAMC,iBAAiB,GAAG;QACxB,GAAGH,WAAW;QACdI,WAAW,EAAE,CAAC,CAAC;QAAG;QAClBC,cAAc,EAAEJ,eAAe,CAACI;MAClC,CAAC;MAEDrC,WAAW,CAACmC,iBAAiB,CAAC;MAC9BrB,eAAe,CAAC,IAAI,CAAC;IACvB,CAAC,CAAC,OAAO/B,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BkB,QAAQ,CAAClB,KAAK,YAAYgD,KAAK,GAAGhD,KAAK,CAACuD,OAAO,GAAG,mBAAmB,CAAC;IACxE,CAAC,SAAS;MACRxC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMyC,kBAAkB,GAAG,MAAOC,QAAgB,IAAK;IACrD,IAAI;MACF;MACA/B,kBAAkB,CAACgC,IAAI,IAAI,IAAI/B,GAAG,CAAC+B,IAAI,CAAC,CAACC,GAAG,CAACF,QAAQ,CAAC,CAAC;MAEvD,MAAMzC,QAAQ,GAAG,MAAMqB,KAAK,CAAC,gDAAgD,EAAE;QAC7EC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBI,WAAW,EAAElC,SAAS;UACtB6C,QAAQ,EAAEA;QACZ,CAAC;MACH,CAAC,CAAC;MAEF,MAAMG,IAAI,GAAG,MAAM5C,QAAQ,CAACmC,IAAI,CAAC,CAAC;MAElC,IAAI,CAACnC,QAAQ,CAAC+B,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACY,IAAI,CAACC,OAAO,IAAI,gCAAgC,CAAC;MACnE;MAEA,IAAI,CAACD,IAAI,CAACE,UAAU,EAAE;QACpB,MAAM,IAAId,KAAK,CAAC,qCAAqC,CAAC;MACxD;MAEA/B,WAAW,CAACyC,IAAI,IAAI;QAClB,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;QACtB,OAAO;UACL,GAAGA,IAAI;UACPL,WAAW,EAAE;YACX,GAAGK,IAAI,CAACL,WAAW;YACnB,CAACI,QAAQ,GAAGzE,iBAAiB,CAAC4E,IAAI,CAACE,UAAU;UAC/C;QACF,CAAC;MACH,CAAC,CAAC;MAEFxC,gBAAgB,CAACoC,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,QAAQ,CAAC,CAAC;IAC/C,CAAC,CAAC,OAAOzD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BkB,QAAQ,CAAClB,KAAK,YAAYgD,KAAK,GAAGhD,KAAK,CAACuD,OAAO,GAAG,gCAAgC,CAAC;MACnF;MACAjC,gBAAgB,CAACoC,IAAI,IAAIA,IAAI,CAACK,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKP,QAAQ,CAAC,CAAC;IAC5D,CAAC,SAAS;MACR;MACA/B,kBAAkB,CAACgC,IAAI,IAAI;QACzB,MAAMO,IAAI,GAAG,IAAItC,GAAG,CAAC+B,IAAI,CAAC;QAC1BO,IAAI,CAACC,MAAM,CAACT,QAAQ,CAAC;QACrB,OAAOQ,IAAI;MACb,CAAC,CAAC;IACJ;EACF,CAAC;EAED,MAAME,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAIhD,WAAW,CAAC/B,IAAI,CAAC,CAAC,EAAE;MACtB,MAAMqE,QAAQ,GAAGtC,WAAW,CAAC/B,IAAI,CAAC,CAAC;MACnCyC,cAAc,CAAC6B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,QAAQ,CAAC,CAAC;MAC3CD,kBAAkB,CAACC,QAAQ,CAAC;MAC5BrC,cAAc,CAAC,EAAE,CAAC;IACpB;EACF,CAAC;EAED,MAAMgD,kBAAkB,GAAGvF,WAAW,CAAC,CAAC4E,QAAgB,EAAEZ,OAAe,KAAK;IAC5ErB,iBAAiB,CAAC;MAAEiC,QAAQ;MAAEZ;IAAQ,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMwB,cAAc,GAAIpF,IAAY,IAAK;IACvC,OAAOA,IAAI,CAACqF,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAC3C,MAAMC,WAAW,GAAGF,IAAI,CAACpF,IAAI,CAAC,CAAC;MAC/B,IAAI,CAACsF,WAAW,EAAE;QAChB,oBAAO3F,OAAA,WAAS0F,KAAK;UAAArE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAC3B;;MAEA;MACA,IAAI,WAAW,CAACoE,IAAI,CAACD,WAAW,CAAC,EAAE;QACjC,oBACE3F,OAAA;UAAgBkB,SAAS,EAAC,qBAAqB;UAAAE,QAAA,EAC5CuE,WAAW,CAACvF,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC;QAAC,GADrCqF,KAAK;UAAArE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CAAC;MAET;;MAEA;MACA,oBAAOxB,OAAA;QAAekB,SAAS,EAAC,qBAAqB;QAAAE,QAAA,EAAEuE;MAAW,GAAnDD,KAAK;QAAArE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkD,CAAC;IACzE,CAAC,CAAC;EACJ,CAAC;EAED,MAAMqE,gBAAgB,GAAGA,CAAA,KAAM;IAC7B3D,WAAW,CAAC,IAAI,CAAC;IACjBK,gBAAgB,CAAC,EAAE,CAAC;IACpBE,iBAAiB,CAAC,IAAI,CAAC;IACvBE,kBAAkB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;IAC7BE,cAAc,CAAC,EAAE,CAAC;IAClBE,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,oBACEhD,OAAA;IAAKkB,SAAS,EAAC,KAAK;IAAAE,QAAA,gBAClBpB,OAAA;MAAKkB,SAAS,EAAC,qBAAqB;MAAAE,QAAA,gBAClCpB,OAAA;QAAQkB,SAAS,EAAC,YAAY;QAAAE,QAAA,gBAC5BpB,OAAA;UAAIkB,SAAS,EAAC,OAAO;UAAAE,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5CxB,OAAA;UAAGkB,SAAS,EAAC,UAAU;UAAAE,QAAA,EAAC;QAA0C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChE,CAAC,eAETxB,OAAA;QAAMkB,SAAS,EAAC,cAAc;QAAAE,QAAA,gBAC5BpB,OAAA;UAAKkB,SAAS,EAAC,iBAAiB;UAAAE,QAAA,gBAC9BpB,OAAA;YACEkB,SAAS,EAAC,YAAY;YACtB4E,WAAW,EAAC,sCAAsC;YAClDC,KAAK,EAAElE,SAAU;YACjBmE,QAAQ,EAAGC,CAAC,IAAKnE,YAAY,CAACmE,CAAC,CAACC,MAAM,CAACH,KAAK;UAAE;YAAA1E,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC,EACDuB,YAAY,gBACX/C,OAAA;YACEkB,SAAS,EAAC,4BAA4B;YACtCC,OAAO,EAAE0E,gBAAiB;YAAAzE,QAAA,EAC3B;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,gBAETxB,OAAA;YACEkB,SAAS,EAAC,iBAAiB;YAC3BC,OAAO,EAAE8B,eAAgB;YACzBkD,QAAQ,EAAEpE,SAAS,IAAI,CAACF,SAAS,CAACxB,IAAI,CAAC,CAAE;YAAAe,QAAA,EAExCW,SAAS,GAAG,eAAe,GAAG;UAAkB;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3C,CACT;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC,EAELO,SAAS,iBACR/B,OAAA;UAAKkB,SAAS,EAAC,mBAAmB;UAAAE,QAAA,gBAChCpB,OAAA;YAAKkB,SAAS,EAAC,oBAAoB;YAAAE,QAAA,gBACjCpB,OAAA;cAAKkB,SAAS,EAAC;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAClCxB,OAAA;cAAKkB,SAAS,EAAC;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAClCxB,OAAA;cAAKkB,SAAS,EAAC;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,eACNxB,OAAA;YAAGkB,SAAS,EAAC,cAAc;YAAAE,QAAA,EAAC;UAA8B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3D,CACN,EAEAP,KAAK,iBACJjB,OAAA;UAAKkB,SAAS,EAAC,eAAe;UAAAE,QAAA,EAC3BH;QAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN,EAEAS,QAAQ,IAAI,CAACF,SAAS,iBACrB/B,OAAA;UAAKkB,SAAS,EAAC,mBAAmB;UAAAE,QAAA,gBAChCpB,OAAA;YAAKkB,SAAS,EAAC,yBAAyB;YAAAE,QAAA,gBACtCpB,OAAA;cAAKkB,SAAS,EAAC,aAAa;cAAAE,QAAA,gBAC1BpB,OAAA;gBAAAoB,QAAA,EAAI;cAAiB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC1BxB,OAAA,CAACM,UAAU;gBAACJ,IAAI,EAAE+B,QAAQ,CAACmE;cAAW;gBAAA/E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtC,CAAC,eACNxB,OAAA;cAAKkB,SAAS,EAAC,mBAAmB;cAAAE,QAAA,EAC/BkE,cAAc,CAACrD,QAAQ,CAACmE,UAAU;YAAC;cAAA/E,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,eAENxB,OAAA;YAAKkB,SAAS,EAAC,sBAAsB;YAAAE,QAAA,gBACnCpB,OAAA;cAAKkB,SAAS,EAAC,kBAAkB;cAAAE,QAAA,gBAC/BpB,OAAA;gBAAAoB,QAAA,EAAI;cAAe;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eACxBxB,OAAA;gBAAKkB,SAAS,EAAC,sBAAsB;gBAAAE,QAAA,GAAAQ,qBAAA,GAClCK,QAAQ,CAACsC,cAAc,cAAA3C,qBAAA,uBAAvBA,qBAAA,CAAyB4D,GAAG,CAACa,IAAI,iBAChCrG,OAAA;kBAEEkB,SAAS,EAAE;AACnC,4BAA4BoB,aAAa,CAACgE,QAAQ,CAACD,IAAI,CAAC,GAAG,UAAU,GAAG,EAAE;AAC1E,4BAA4B3D,eAAe,CAAC6D,GAAG,CAACF,IAAI,CAAC,GAAG,YAAY,GAAG,EAAE,EAAG;kBACpDlF,OAAO,EAAEA,CAAA,KAAM,CAACmB,aAAa,CAACgE,QAAQ,CAACD,IAAI,CAAC,IAAI,CAAC3D,eAAe,CAAC6D,GAAG,CAACF,IAAI,CAAC,IAAI5B,kBAAkB,CAAC4B,IAAI,CAAE;kBACvGF,QAAQ,EAAE7D,aAAa,CAACgE,QAAQ,CAACD,IAAI,CAAC,IAAI3D,eAAe,CAAC6D,GAAG,CAACF,IAAI,CAAE;kBAAAjF,QAAA,GAEnEiF,IAAI,EACJ3D,eAAe,CAAC6D,GAAG,CAACF,IAAI,CAAC,iBACxBrG,OAAA;oBAAKkB,SAAS,EAAC,2BAA2B;oBAAAE,QAAA,gBACxCpB,OAAA;sBAAKkB,SAAS,EAAC;oBAAK;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC,eAC3BxB,OAAA;sBAAKkB,SAAS,EAAC;oBAAK;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC,eAC3BxB,OAAA;sBAAKkB,SAAS,EAAC;oBAAK;sBAAAG,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACxB,CACN;gBAAA,GAdI6E,IAAI;kBAAAhF,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAeH,CACT;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eAENxB,OAAA;gBAAKkB,SAAS,EAAC,sBAAsB;gBAAAE,QAAA,gBACnCpB,OAAA;kBAAAoB,QAAA,EAAI;gBAAY;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACrBxB,OAAA;kBAAKkB,SAAS,EAAC,mBAAmB;kBAAAE,QAAA,EAC/ByB,WAAW,CAAC2C,GAAG,CAACa,IAAI,iBACnBrG,OAAA;oBAEEkB,SAAS,EAAE;AACrC,8BAA8BoB,aAAa,CAACgE,QAAQ,CAACD,IAAI,CAAC,GAAG,UAAU,GAAG,EAAE;AAC5E,8BAA8B3D,eAAe,CAAC6D,GAAG,CAACF,IAAI,CAAC,GAAG,YAAY,GAAG,EAAE,EAAG;oBACpDF,QAAQ,EAAE7D,aAAa,CAACgE,QAAQ,CAACD,IAAI,CAAC,IAAI3D,eAAe,CAAC6D,GAAG,CAACF,IAAI,CAAE;oBAAAjF,QAAA,GAEnEiF,IAAI,EACJ3D,eAAe,CAAC6D,GAAG,CAACF,IAAI,CAAC,iBACxBrG,OAAA;sBAAKkB,SAAS,EAAC,2BAA2B;sBAAAE,QAAA,gBACxCpB,OAAA;wBAAKkB,SAAS,EAAC;sBAAK;wBAAAG,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAM,CAAC,eAC3BxB,OAAA;wBAAKkB,SAAS,EAAC;sBAAK;wBAAAG,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAM,CAAC,eAC3BxB,OAAA;wBAAKkB,SAAS,EAAC;sBAAK;wBAAAG,QAAA,EAAAC,YAAA;wBAAAC,UAAA;wBAAAC,YAAA;sBAAA,OAAM,CAAC;oBAAA;sBAAAH,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OACxB,CACN;kBAAA,GAbI6E,IAAI;oBAAAhF,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAcH,CACT;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACC,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACH,CAAC,eAENxB,OAAA;gBAAKkB,SAAS,EAAC,mBAAmB;gBAAAE,QAAA,gBAChCpB,OAAA;kBACEwG,IAAI,EAAC,MAAM;kBACXT,KAAK,EAAE3D,WAAY;kBACnB4D,QAAQ,EAAGC,CAAC,IAAK5D,cAAc,CAAC4D,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;kBAChDD,WAAW,EAAC,2BAA2B;kBACvC5E,SAAS,EAAC;gBAAiB;kBAAAG,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC5B,CAAC,eACFxB,OAAA;kBACEkB,SAAS,EAAC,iBAAiB;kBAC3BC,OAAO,EAAEiE,mBAAoB;kBAC7Be,QAAQ,EAAE,CAAC/D,WAAW,CAAC/B,IAAI,CAAC,CAAE;kBAAAe,QAAA,EAC/B;gBAED;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,eAENxB,OAAA;cAAKkB,SAAS,EAAC,iBAAiB;cAAAE,QAAA,gBAC9BpB,OAAA;gBAAAoB,QAAA,EAAI;cAAsB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC/BxB,OAAA;gBAAKkB,SAAS,EAAC,mBAAmB;gBAAAE,QAAA,EAC/BqF,MAAM,CAACC,OAAO,CAACzE,QAAQ,CAACqC,WAAW,CAAC,CAACkB,GAAG,CAAC,CAAC,CAACa,IAAI,EAAEM,MAAM,CAAC,kBACvD3G,OAAA;kBAEEkB,SAAS,EAAC,8BAA8B;kBACxCC,OAAO,EAAEA,CAAA,KAAMkE,kBAAkB,CAACgB,IAAI,EAAEM,MAAM,CAAE;kBAAAvF,QAAA,gBAEhDpB,OAAA;oBAAKkB,SAAS,EAAC,aAAa;oBAAAE,QAAA,gBAC1BpB,OAAA;sBAAAoB,QAAA,EAAKiF,IAAI,CAACO,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGR,IAAI,CAACS,KAAK,CAAC,CAAC;oBAAC;sBAAAzF,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC,eACvDxB,OAAA,CAACM,UAAU;sBAACJ,IAAI,EAAEyG;oBAAO;sBAAAtF,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAE,CAAC;kBAAA;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACzB,CAAC,eACNxB,OAAA;oBAAKkB,SAAS,EAAC,2BAA2B;oBAAAE,QAAA,EACvCkE,cAAc,CAACqB,MAAM;kBAAC;oBAAAtF,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACpB,CAAC,eACNxB,OAAA;oBAAKkB,SAAS,EAAC,aAAa;oBAAAE,QAAA,eAC1BpB,OAAA;sBAAMkB,SAAS,EAAC,aAAa;sBAAAE,QAAA,EAAC;oBAAe;sBAAAC,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAM;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACjD,CAAC;gBAAA,GAbD6E,IAAI;kBAAAhF,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAcN,CACN;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CACN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC,EAELgB,cAAc,iBACbxC,OAAA;MAAKkB,SAAS,EAAC,eAAe;MAACC,OAAO,EAAEA,CAAA,KAAMsB,iBAAiB,CAAC,IAAI,CAAE;MAAArB,QAAA,eACpEpB,OAAA;QAAKkB,SAAS,EAAC,eAAe;QAACC,OAAO,EAAE8E,CAAC,IAAIA,CAAC,CAACc,eAAe,CAAC,CAAE;QAAA3F,QAAA,gBAC/DpB,OAAA;UAAKkB,SAAS,EAAC,cAAc;UAAAE,QAAA,gBAC3BpB,OAAA;YAAAoB,QAAA,EAAKoB,cAAc,CAACkC,QAAQ,CAACkC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGrE,cAAc,CAACkC,QAAQ,CAACoC,KAAK,CAAC,CAAC;UAAC;YAAAzF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC7FxB,OAAA;YAAQkB,SAAS,EAAC,cAAc;YAACC,OAAO,EAAEA,CAAA,KAAMsB,iBAAiB,CAAC,IAAI,CAAE;YAAArB,QAAA,EAAC;UAAC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChF,CAAC,eACNxB,OAAA;UAAKkB,SAAS,EAAC,YAAY;UAAAE,QAAA,eACzBpB,OAAA;YAAKkB,SAAS,EAAC,mBAAmB;YAAAE,QAAA,EAC/BkE,cAAc,CAAC9C,cAAc,CAACsB,OAAO;UAAC;YAAAzC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eACNxB,OAAA;UAAKkB,SAAS,EAAC,cAAc;UAAAE,QAAA,eAC3BpB,OAAA,CAACM,UAAU;YAACJ,IAAI,EAAEsC,cAAc,CAACsB;UAAQ;YAAAzC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACG,GAAA,CA3VQD,GAAG;AAAAsF,GAAA,GAAHtF,GAAG;AA6VZ,eAAeA,GAAG;AAAC,IAAAD,EAAA,EAAAuF,GAAA;AAAAC,YAAA,CAAAxF,EAAA;AAAAwF,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}